import {
  require_ATNDeserializationOptions,
  require_ATNDeserializer,
  require_ActionTransition,
  require_AmbiguityInfo,
  require_AtomTransition,
  require_BasicBlockStartState,
  require_BlockEndState,
  require_BlockStartState,
  require_Character,
  require_ConflictInfo,
  require_ContextSensitivityInfo,
  require_DecisionEventInfo,
  require_DecisionInfo,
  require_EpsilonTransition,
  require_ErrorInfo,
  require_LexerChannelAction,
  require_LexerCustomAction,
  require_LexerModeAction,
  require_LexerMoreAction,
  require_LexerPopModeAction,
  require_LexerPushModeAction,
  require_LexerSkipAction,
  require_LexerTypeAction,
  require_LookaheadEventInfo,
  require_LoopEndState,
  require_ParseInfo,
  require_ParserATNSimulator,
  require_PlusBlockStartState,
  require_PlusLoopbackState,
  require_PrecedencePredicateTransition,
  require_PredicateEvalInfo,
  require_PredictionMode,
  require_ProfilingATNSimulator,
  require_RangeTransition,
  require_RuleStartState,
  require_SimulatorState,
  require_StarBlockStartState,
  require_StarLoopbackState,
  require_TokensStartState
} from "./chunk-FXRVVXGU.js";
import {
  require_PredicateTransition
} from "./chunk-22QXU36G.js";
import {
  require_ATN,
  require_ATNConfig,
  require_ATNConfigSet,
  require_ATNSimulator,
  require_ATNState,
  require_ATNStateType,
  require_BasicState,
  require_DecisionState,
  require_IntervalSet,
  require_InvalidState,
  require_LL1Analyzer,
  require_LexerATNSimulator,
  require_LexerActionExecutor,
  require_LexerIndexedCustomAction,
  require_NotSetTransition,
  require_OrderedATNConfigSet,
  require_PredictionContext,
  require_PredictionContextCache,
  require_RuleStopState,
  require_RuleTransition,
  require_SetTransition,
  require_StarLoopEntryState,
  require_WildcardTransition
} from "./chunk-LBKHYZ7U.js";
import "./chunk-XPQAULV4.js";
import {
  require_AbstractPredicateTransition,
  require_SemanticContext,
  require_Transition
} from "./chunk-ROIGMS2W.js";
import "./chunk-AVXGVIZ3.js";
import "./chunk-U6TX4QV4.js";
import "./chunk-TJPYJIIH.js";
import "./chunk-AEX2UWXW.js";
import {
  __commonJS
} from "./chunk-EQCVQC35.js";

// node_modules/.pnpm/antlr4ts@0.5.0-alpha.4/node_modules/antlr4ts/atn/ATNType.js
var require_ATNType = __commonJS({
  "node_modules/.pnpm/antlr4ts@0.5.0-alpha.4/node_modules/antlr4ts/atn/ATNType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ATNType = void 0;
    var ATNType;
    (function(ATNType2) {
      ATNType2[ATNType2["LEXER"] = 0] = "LEXER";
      ATNType2[ATNType2["PARSER"] = 1] = "PARSER";
    })(ATNType = exports.ATNType || (exports.ATNType = {}));
  }
});

// node_modules/.pnpm/antlr4ts@0.5.0-alpha.4/node_modules/antlr4ts/atn/CodePointTransitions.js
var require_CodePointTransitions = __commonJS({
  "node_modules/.pnpm/antlr4ts@0.5.0-alpha.4/node_modules/antlr4ts/atn/CodePointTransitions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWithCodePointRange = exports.createWithCodePoint = void 0;
    var Character = require_Character();
    var AtomTransition_1 = require_AtomTransition();
    var IntervalSet_1 = require_IntervalSet();
    var RangeTransition_1 = require_RangeTransition();
    var SetTransition_1 = require_SetTransition();
    function createWithCodePoint(target, codePoint) {
      if (Character.isSupplementaryCodePoint(codePoint)) {
        return new SetTransition_1.SetTransition(target, IntervalSet_1.IntervalSet.of(codePoint));
      } else {
        return new AtomTransition_1.AtomTransition(target, codePoint);
      }
    }
    exports.createWithCodePoint = createWithCodePoint;
    function createWithCodePointRange(target, codePointFrom, codePointTo) {
      if (Character.isSupplementaryCodePoint(codePointFrom) || Character.isSupplementaryCodePoint(codePointTo)) {
        return new SetTransition_1.SetTransition(target, IntervalSet_1.IntervalSet.of(codePointFrom, codePointTo));
      } else {
        return new RangeTransition_1.RangeTransition(target, codePointFrom, codePointTo);
      }
    }
    exports.createWithCodePointRange = createWithCodePointRange;
  }
});

// node_modules/.pnpm/antlr4ts@0.5.0-alpha.4/node_modules/antlr4ts/atn/LexerAction.js
var require_LexerAction = __commonJS({
  "node_modules/.pnpm/antlr4ts@0.5.0-alpha.4/node_modules/antlr4ts/atn/LexerAction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/antlr4ts@0.5.0-alpha.4/node_modules/antlr4ts/atn/LexerActionType.js
var require_LexerActionType = __commonJS({
  "node_modules/.pnpm/antlr4ts@0.5.0-alpha.4/node_modules/antlr4ts/atn/LexerActionType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LexerActionType = void 0;
    var LexerActionType;
    (function(LexerActionType2) {
      LexerActionType2[LexerActionType2["CHANNEL"] = 0] = "CHANNEL";
      LexerActionType2[LexerActionType2["CUSTOM"] = 1] = "CUSTOM";
      LexerActionType2[LexerActionType2["MODE"] = 2] = "MODE";
      LexerActionType2[LexerActionType2["MORE"] = 3] = "MORE";
      LexerActionType2[LexerActionType2["POP_MODE"] = 4] = "POP_MODE";
      LexerActionType2[LexerActionType2["PUSH_MODE"] = 5] = "PUSH_MODE";
      LexerActionType2[LexerActionType2["SKIP"] = 6] = "SKIP";
      LexerActionType2[LexerActionType2["TYPE"] = 7] = "TYPE";
    })(LexerActionType = exports.LexerActionType || (exports.LexerActionType = {}));
  }
});

// node_modules/.pnpm/antlr4ts@0.5.0-alpha.4/node_modules/antlr4ts/atn/TransitionType.js
var require_TransitionType = __commonJS({
  "node_modules/.pnpm/antlr4ts@0.5.0-alpha.4/node_modules/antlr4ts/atn/TransitionType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransitionType = void 0;
    var TransitionType;
    (function(TransitionType2) {
      TransitionType2[TransitionType2["EPSILON"] = 1] = "EPSILON";
      TransitionType2[TransitionType2["RANGE"] = 2] = "RANGE";
      TransitionType2[TransitionType2["RULE"] = 3] = "RULE";
      TransitionType2[TransitionType2["PREDICATE"] = 4] = "PREDICATE";
      TransitionType2[TransitionType2["ATOM"] = 5] = "ATOM";
      TransitionType2[TransitionType2["ACTION"] = 6] = "ACTION";
      TransitionType2[TransitionType2["SET"] = 7] = "SET";
      TransitionType2[TransitionType2["NOT_SET"] = 8] = "NOT_SET";
      TransitionType2[TransitionType2["WILDCARD"] = 9] = "WILDCARD";
      TransitionType2[TransitionType2["PRECEDENCE"] = 10] = "PRECEDENCE";
    })(TransitionType = exports.TransitionType || (exports.TransitionType = {}));
  }
});

// node_modules/.pnpm/antlr4ts@0.5.0-alpha.4/node_modules/antlr4ts/atn/index.js
var require_atn = __commonJS({
  "node_modules/.pnpm/antlr4ts@0.5.0-alpha.4/node_modules/antlr4ts/atn/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_AbstractPredicateTransition(), exports);
    __exportStar(require_ActionTransition(), exports);
    __exportStar(require_AmbiguityInfo(), exports);
    __exportStar(require_ATN(), exports);
    __exportStar(require_ATNConfig(), exports);
    __exportStar(require_ATNConfigSet(), exports);
    __exportStar(require_ATNDeserializationOptions(), exports);
    __exportStar(require_ATNDeserializer(), exports);
    __exportStar(require_ATNSimulator(), exports);
    __exportStar(require_ATNState(), exports);
    __exportStar(require_ATNStateType(), exports);
    __exportStar(require_ATNType(), exports);
    __exportStar(require_AtomTransition(), exports);
    __exportStar(require_BasicBlockStartState(), exports);
    __exportStar(require_BasicState(), exports);
    __exportStar(require_BlockEndState(), exports);
    __exportStar(require_BlockStartState(), exports);
    __exportStar(require_CodePointTransitions(), exports);
    __exportStar(require_ConflictInfo(), exports);
    __exportStar(require_ContextSensitivityInfo(), exports);
    __exportStar(require_DecisionEventInfo(), exports);
    __exportStar(require_DecisionInfo(), exports);
    __exportStar(require_DecisionState(), exports);
    __exportStar(require_EpsilonTransition(), exports);
    __exportStar(require_ErrorInfo(), exports);
    __exportStar(require_InvalidState(), exports);
    __exportStar(require_LexerAction(), exports);
    __exportStar(require_LexerActionExecutor(), exports);
    __exportStar(require_LexerActionType(), exports);
    __exportStar(require_LexerATNSimulator(), exports);
    __exportStar(require_LexerChannelAction(), exports);
    __exportStar(require_LexerCustomAction(), exports);
    __exportStar(require_LexerIndexedCustomAction(), exports);
    __exportStar(require_LexerModeAction(), exports);
    __exportStar(require_LexerMoreAction(), exports);
    __exportStar(require_LexerPopModeAction(), exports);
    __exportStar(require_LexerPushModeAction(), exports);
    __exportStar(require_LexerSkipAction(), exports);
    __exportStar(require_LexerTypeAction(), exports);
    __exportStar(require_LL1Analyzer(), exports);
    __exportStar(require_LookaheadEventInfo(), exports);
    __exportStar(require_LoopEndState(), exports);
    __exportStar(require_NotSetTransition(), exports);
    __exportStar(require_OrderedATNConfigSet(), exports);
    __exportStar(require_ParseInfo(), exports);
    __exportStar(require_ParserATNSimulator(), exports);
    __exportStar(require_PlusBlockStartState(), exports);
    __exportStar(require_PlusLoopbackState(), exports);
    __exportStar(require_PrecedencePredicateTransition(), exports);
    __exportStar(require_PredicateEvalInfo(), exports);
    __exportStar(require_PredicateTransition(), exports);
    __exportStar(require_PredictionContext(), exports);
    __exportStar(require_PredictionContextCache(), exports);
    __exportStar(require_PredictionMode(), exports);
    __exportStar(require_ProfilingATNSimulator(), exports);
    __exportStar(require_RangeTransition(), exports);
    __exportStar(require_RuleStartState(), exports);
    __exportStar(require_RuleStopState(), exports);
    __exportStar(require_RuleTransition(), exports);
    __exportStar(require_SemanticContext(), exports);
    __exportStar(require_SetTransition(), exports);
    __exportStar(require_SimulatorState(), exports);
    __exportStar(require_StarBlockStartState(), exports);
    __exportStar(require_StarLoopbackState(), exports);
    __exportStar(require_StarLoopEntryState(), exports);
    __exportStar(require_TokensStartState(), exports);
    __exportStar(require_Transition(), exports);
    __exportStar(require_TransitionType(), exports);
    __exportStar(require_WildcardTransition(), exports);
  }
});
export default require_atn();
/*! Bundled license information:

antlr4ts/atn/ATNType.js:
antlr4ts/atn/CodePointTransitions.js:
antlr4ts/atn/LexerAction.js:
antlr4ts/atn/LexerActionType.js:
antlr4ts/atn/TransitionType.js:
antlr4ts/atn/index.js:
  (*!
   * Copyright 2016 The ANTLR Project. All rights reserved.
   * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
   *)
*/
//# sourceMappingURL=antlr4ts_atn.js.map
