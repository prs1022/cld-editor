{
  "version": 3,
  "sources": ["../../.pnpm/antlr4ts@0.5.0-alpha.4/src/atn/ATNType.ts", "../../.pnpm/antlr4ts@0.5.0-alpha.4/src/atn/CodePointTransitions.ts", "../../.pnpm/antlr4ts@0.5.0-alpha.4/src/atn/LexerActionType.ts", "../../.pnpm/antlr4ts@0.5.0-alpha.4/src/atn/TransitionType.ts", "../../.pnpm/antlr4ts@0.5.0-alpha.4/src/atn/index.ts"],
  "sourcesContent": ["/*!\r\n * Copyright 2016 The ANTLR Project. All rights reserved.\r\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\r\n */\r\n\r\n// ConvertTo-TS run at 2016-10-04T11:26:27.6094030-07:00\r\n\r\n/**\r\n * Represents the type of recognizer an ATN applies to.\r\n *\r\n * @author Sam Harwell\r\n */\r\nexport const enum ATNType {\r\n\r\n\t/**\r\n\t * A lexer grammar.\r\n\t */\r\n\tLEXER,\r\n\r\n\t/**\r\n\t * A parser grammar.\r\n\t */\r\n\tPARSER,\r\n\r\n}\r\n", "/*!\r\n * Copyright 2016 The ANTLR Project. All rights reserved.\r\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\r\n */\r\n\r\nimport * as Character from \"../misc/Character\";\r\nimport { ATNState } from \"./ATNState\";\r\nimport { AtomTransition } from \"./AtomTransition\";\r\nimport { IntervalSet } from \"../misc/IntervalSet\";\r\nimport { RangeTransition } from \"./RangeTransition\";\r\nimport { SetTransition } from \"./SetTransition\";\r\nimport { Transition } from \"./Transition\";\r\n\r\n/**\r\n * Utility functions to create {@link AtomTransition}, {@link RangeTransition},\r\n * and {@link SetTransition} appropriately based on the range of the input.\r\n *\r\n * To keep the serialized ATN size small, we only inline atom and\r\n * range transitions for Unicode code points <= U+FFFF.\r\n *\r\n * Whenever we encounter a Unicode code point > U+FFFF, we represent that\r\n * as a set transition (even if it is logically an atom or a range).\r\n */\r\n\r\n/**\r\n * If {@code codePoint} is <= U+FFFF, returns a new {@link AtomTransition}.\r\n * Otherwise, returns a new {@link SetTransition}.\r\n */\r\nexport function createWithCodePoint(target: ATNState, codePoint: number): Transition {\r\n\tif (Character.isSupplementaryCodePoint(codePoint)) {\r\n\t\treturn new SetTransition(target, IntervalSet.of(codePoint));\r\n\t}\r\n\telse {\r\n\t\treturn new AtomTransition(target, codePoint);\r\n\t}\r\n}\r\n\r\n/**\r\n * If {@code codePointFrom} and {@code codePointTo} are both\r\n * <= U+FFFF, returns a new {@link RangeTransition}.\r\n * Otherwise, returns a new {@link SetTransition}.\r\n */\r\nexport function createWithCodePointRange(target: ATNState, codePointFrom: number, codePointTo: number): Transition {\r\n\tif (Character.isSupplementaryCodePoint(codePointFrom) || Character.isSupplementaryCodePoint(codePointTo)) {\r\n\t\treturn new SetTransition(target, IntervalSet.of(codePointFrom, codePointTo));\r\n\t}\r\n\telse {\r\n\t\treturn new RangeTransition(target, codePointFrom, codePointTo);\r\n\t}\r\n}\r\n", "/*!\r\n * Copyright 2016 The ANTLR Project. All rights reserved.\r\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\r\n */\r\n\r\n// ConvertTo-TS run at 2016-10-04T11:26:29.0172086-07:00\r\n\r\n/**\r\n * Represents the serialization type of a {@link LexerAction}.\r\n *\r\n * @author Sam Harwell\r\n * @since 4.2\r\n */\r\nexport const enum LexerActionType {\r\n\t/**\r\n\t * The type of a {@link LexerChannelAction} action.\r\n\t */\r\n\tCHANNEL,\r\n\t/**\r\n\t * The type of a {@link LexerCustomAction} action.\r\n\t */\r\n\tCUSTOM,\r\n\t/**\r\n\t * The type of a {@link LexerModeAction} action.\r\n\t */\r\n\tMODE,\r\n\t/**\r\n\t * The type of a {@link LexerMoreAction} action.\r\n\t */\r\n\tMORE,\r\n\t/**\r\n\t * The type of a {@link LexerPopModeAction} action.\r\n\t */\r\n\tPOP_MODE,\r\n\t/**\r\n\t * The type of a {@link LexerPushModeAction} action.\r\n\t */\r\n\tPUSH_MODE,\r\n\t/**\r\n\t * The type of a {@link LexerSkipAction} action.\r\n\t */\r\n\tSKIP,\r\n\t/**\r\n\t * The type of a {@link LexerTypeAction} action.\r\n\t */\r\n\tTYPE,\r\n}\r\n", "/*!\r\n * Copyright 2016 The ANTLR Project. All rights reserved.\r\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\r\n */\r\n\r\n// ConvertTo-TS run at 2016-10-04T11:26:37.8530496-07:00\r\n\r\nexport const enum TransitionType {\r\n\t// constants for serialization\r\n\tEPSILON = 1,\r\n\tRANGE = 2,\r\n\tRULE = 3,\r\n\tPREDICATE = 4, // e.g., {isType(input.LT(1))}?\r\n\tATOM = 5,\r\n\tACTION = 6,\r\n\tSET = 7, // ~(A|B) or ~atom, wildcard, which convert to next 2\r\n\tNOT_SET = 8,\r\n\tWILDCARD = 9,\r\n\tPRECEDENCE = 10,\r\n}\r\n", "/*!\r\n * Copyright 2016 The ANTLR Project. All rights reserved.\r\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\r\n */\r\n\r\nexport * from \"./AbstractPredicateTransition\";\r\nexport * from \"./ActionTransition\";\r\nexport * from \"./AmbiguityInfo\";\r\nexport * from \"./ATN\";\r\nexport * from \"./ATNConfig\";\r\nexport * from \"./ATNConfigSet\";\r\nexport * from \"./ATNDeserializationOptions\";\r\nexport * from \"./ATNDeserializer\";\r\n// export * from \"./ATNSerializer\";\r\nexport * from \"./ATNSimulator\";\r\nexport * from \"./ATNState\";\r\nexport * from \"./ATNStateType\";\r\nexport * from \"./ATNType\";\r\nexport * from \"./AtomTransition\";\r\nexport * from \"./BasicBlockStartState\";\r\nexport * from \"./BasicState\";\r\nexport * from \"./BlockEndState\";\r\nexport * from \"./BlockStartState\";\r\nexport * from \"./CodePointTransitions\";\r\nexport * from \"./ConflictInfo\";\r\nexport * from \"./ContextSensitivityInfo\";\r\nexport * from \"./DecisionEventInfo\";\r\nexport * from \"./DecisionInfo\";\r\nexport * from \"./DecisionState\";\r\nexport * from \"./EpsilonTransition\";\r\nexport * from \"./ErrorInfo\";\r\nexport * from \"./InvalidState\";\r\nexport * from \"./LexerAction\";\r\nexport * from \"./LexerActionExecutor\";\r\nexport * from \"./LexerActionType\";\r\nexport * from \"./LexerATNSimulator\";\r\nexport * from \"./LexerChannelAction\";\r\nexport * from \"./LexerCustomAction\";\r\nexport * from \"./LexerIndexedCustomAction\";\r\nexport * from \"./LexerModeAction\";\r\nexport * from \"./LexerMoreAction\";\r\nexport * from \"./LexerPopModeAction\";\r\nexport * from \"./LexerPushModeAction\";\r\nexport * from \"./LexerSkipAction\";\r\nexport * from \"./LexerTypeAction\";\r\nexport * from \"./LL1Analyzer\";\r\nexport * from \"./LookaheadEventInfo\";\r\nexport * from \"./LoopEndState\";\r\nexport * from \"./NotSetTransition\";\r\nexport * from \"./OrderedATNConfigSet\";\r\nexport * from \"./ParseInfo\";\r\nexport * from \"./ParserATNSimulator\";\r\nexport * from \"./PlusBlockStartState\";\r\nexport * from \"./PlusLoopbackState\";\r\nexport * from \"./PrecedencePredicateTransition\";\r\nexport * from \"./PredicateEvalInfo\";\r\nexport * from \"./PredicateTransition\";\r\nexport * from \"./PredictionContext\";\r\nexport * from \"./PredictionContextCache\";\r\nexport * from \"./PredictionMode\";\r\nexport * from \"./ProfilingATNSimulator\";\r\nexport * from \"./RangeTransition\";\r\nexport * from \"./RuleStartState\";\r\nexport * from \"./RuleStopState\";\r\nexport * from \"./RuleTransition\";\r\nexport * from \"./SemanticContext\";\r\nexport * from \"./SetTransition\";\r\nexport * from \"./SimulatorState\";\r\nexport * from \"./StarBlockStartState\";\r\nexport * from \"./StarLoopbackState\";\r\nexport * from \"./StarLoopEntryState\";\r\nexport * from \"./TokensStartState\";\r\nexport * from \"./Transition\";\r\nexport * from \"./TransitionType\";\r\nexport * from \"./WildcardTransition\";\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,QAAkB;AAAlB,KAAA,SAAkBA,UAAO;AAKxB,MAAAA,SAAAA,SAAA,OAAA,IAAA,CAAA,IAAA;AAKA,MAAAA,SAAAA,SAAA,QAAA,IAAA,CAAA,IAAA;IAED,GAZkB,UAAA,QAAA,YAAA,QAAA,UAAO,CAAA,EAAA;;;;;;;;;;ACPzB,QAAA,YAAA;AAEA,QAAA,mBAAA;AACA,QAAA,gBAAA;AACA,QAAA,oBAAA;AACA,QAAA,kBAAA;AAkBA,aAAgB,oBAAoB,QAAkB,WAAiB;AACtE,UAAI,UAAU,yBAAyB,SAAS,GAAG;AAClD,eAAO,IAAI,gBAAA,cAAc,QAAQ,cAAA,YAAY,GAAG,SAAS,CAAC;aAEtD;AACJ,eAAO,IAAI,iBAAA,eAAe,QAAQ,SAAS;;IAE7C;AAPA,YAAA,sBAAA;AAcA,aAAgB,yBAAyB,QAAkB,eAAuB,aAAmB;AACpG,UAAI,UAAU,yBAAyB,aAAa,KAAK,UAAU,yBAAyB,WAAW,GAAG;AACzG,eAAO,IAAI,gBAAA,cAAc,QAAQ,cAAA,YAAY,GAAG,eAAe,WAAW,CAAC;aAEvE;AACJ,eAAO,IAAI,kBAAA,gBAAgB,QAAQ,eAAe,WAAW;;IAE/D;AAPA,YAAA,2BAAA;;;A;;;;;;;;;;;;;;;AC7BA,QAAkB;AAAlB,KAAA,SAAkBC,kBAAe;AAIhC,MAAAA,iBAAAA,iBAAA,SAAA,IAAA,CAAA,IAAA;AAIA,MAAAA,iBAAAA,iBAAA,QAAA,IAAA,CAAA,IAAA;AAIA,MAAAA,iBAAAA,iBAAA,MAAA,IAAA,CAAA,IAAA;AAIA,MAAAA,iBAAAA,iBAAA,MAAA,IAAA,CAAA,IAAA;AAIA,MAAAA,iBAAAA,iBAAA,UAAA,IAAA,CAAA,IAAA;AAIA,MAAAA,iBAAAA,iBAAA,WAAA,IAAA,CAAA,IAAA;AAIA,MAAAA,iBAAAA,iBAAA,MAAA,IAAA,CAAA,IAAA;AAIA,MAAAA,iBAAAA,iBAAA,MAAA,IAAA,CAAA,IAAA;IACD,GAjCkB,kBAAA,QAAA,oBAAA,QAAA,kBAAe,CAAA,EAAA;;;;;;;;;;ACNjC,QAAkB;AAAlB,KAAA,SAAkBC,iBAAc;AAE/B,MAAAA,gBAAAA,gBAAA,SAAA,IAAA,CAAA,IAAA;AACA,MAAAA,gBAAAA,gBAAA,OAAA,IAAA,CAAA,IAAA;AACA,MAAAA,gBAAAA,gBAAA,MAAA,IAAA,CAAA,IAAA;AACA,MAAAA,gBAAAA,gBAAA,WAAA,IAAA,CAAA,IAAA;AACA,MAAAA,gBAAAA,gBAAA,MAAA,IAAA,CAAA,IAAA;AACA,MAAAA,gBAAAA,gBAAA,QAAA,IAAA,CAAA,IAAA;AACA,MAAAA,gBAAAA,gBAAA,KAAA,IAAA,CAAA,IAAA;AACA,MAAAA,gBAAAA,gBAAA,SAAA,IAAA,CAAA,IAAA;AACA,MAAAA,gBAAAA,gBAAA,UAAA,IAAA,CAAA,IAAA;AACA,MAAAA,gBAAAA,gBAAA,YAAA,IAAA,EAAA,IAAA;IACD,GAZkB,iBAAA,QAAA,mBAAA,QAAA,iBAAc,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;ACFhC,iBAAA,uCAAA,OAAA;AACA,iBAAA,4BAAA,OAAA;AACA,iBAAA,yBAAA,OAAA;AACA,iBAAA,eAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,wBAAA,OAAA;AACA,iBAAA,qCAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;AAEA,iBAAA,wBAAA,OAAA;AACA,iBAAA,oBAAA,OAAA;AACA,iBAAA,wBAAA,OAAA;AACA,iBAAA,mBAAA,OAAA;AACA,iBAAA,0BAAA,OAAA;AACA,iBAAA,gCAAA,OAAA;AACA,iBAAA,sBAAA,OAAA;AACA,iBAAA,yBAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;AACA,iBAAA,gCAAA,OAAA;AACA,iBAAA,wBAAA,OAAA;AACA,iBAAA,kCAAA,OAAA;AACA,iBAAA,6BAAA,OAAA;AACA,iBAAA,wBAAA,OAAA;AACA,iBAAA,yBAAA,OAAA;AACA,iBAAA,6BAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,wBAAA,OAAA;AACA,iBAAA,uBAAA,OAAA;AACA,iBAAA,+BAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;AACA,iBAAA,6BAAA,OAAA;AACA,iBAAA,8BAAA,OAAA;AACA,iBAAA,6BAAA,OAAA;AACA,iBAAA,oCAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;AACA,iBAAA,8BAAA,OAAA;AACA,iBAAA,+BAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;AACA,iBAAA,uBAAA,OAAA;AACA,iBAAA,8BAAA,OAAA;AACA,iBAAA,wBAAA,OAAA;AACA,iBAAA,4BAAA,OAAA;AACA,iBAAA,+BAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,8BAAA,OAAA;AACA,iBAAA,+BAAA,OAAA;AACA,iBAAA,6BAAA,OAAA;AACA,iBAAA,yCAAA,OAAA;AACA,iBAAA,6BAAA,OAAA;AACA,iBAAA,+BAAA,OAAA;AACA,iBAAA,6BAAA,OAAA;AACA,iBAAA,kCAAA,OAAA;AACA,iBAAA,0BAAA,OAAA;AACA,iBAAA,iCAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;AACA,iBAAA,0BAAA,OAAA;AACA,iBAAA,yBAAA,OAAA;AACA,iBAAA,0BAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;AACA,iBAAA,yBAAA,OAAA;AACA,iBAAA,0BAAA,OAAA;AACA,iBAAA,+BAAA,OAAA;AACA,iBAAA,6BAAA,OAAA;AACA,iBAAA,8BAAA,OAAA;AACA,iBAAA,4BAAA,OAAA;AACA,iBAAA,sBAAA,OAAA;AACA,iBAAA,0BAAA,OAAA;AACA,iBAAA,8BAAA,OAAA;;;",
  "names": ["ATNType", "LexerActionType", "TransitionType"]
}
