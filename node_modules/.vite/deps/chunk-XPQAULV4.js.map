{
  "version": 3,
  "sources": ["../../.pnpm/antlr4ts@0.5.0-alpha.4/src/VocabularyImpl.ts"],
  "sourcesContent": ["/*!\r\n * Copyright 2016 The ANTLR Project. All rights reserved.\r\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\r\n */\r\n\r\n// ConvertTo-TS run at 2016-10-04T11:26:59.5829654-07:00\r\n\r\nimport { NotNull, Override } from \"./Decorators\";\r\nimport { Token } from \"./Token\";\r\nimport { Vocabulary } from \"./Vocabulary\";\r\n\r\n/**\r\n * This class provides a default implementation of the {@link Vocabulary}\r\n * interface.\r\n *\r\n * @author Sam Harwell\r\n */\r\nexport class VocabularyImpl implements Vocabulary {\r\n\t/**\r\n\t * Gets an empty {@link Vocabulary} instance.\r\n\t *\r\n\t * No literal or symbol names are assigned to token types, so\r\n\t * {@link #getDisplayName(int)} returns the numeric value for all tokens\r\n\t * except {@link Token#EOF}.\r\n\t */\r\n\t@NotNull\r\n\tpublic static readonly EMPTY_VOCABULARY: VocabularyImpl = new VocabularyImpl([], [], []);\r\n\r\n\t@NotNull\r\n\tprivate readonly literalNames: Array<string | undefined>;\r\n\t@NotNull\r\n\tprivate readonly symbolicNames: Array<string | undefined>;\r\n\t@NotNull\r\n\tprivate readonly displayNames: Array<string | undefined>;\r\n\r\n\tprivate _maxTokenType: number;\r\n\r\n\t/**\r\n\t * Constructs a new instance of {@link VocabularyImpl} from the specified\r\n\t * literal, symbolic, and display token names.\r\n\t *\r\n\t * @param literalNames The literal names assigned to tokens, or an empty array\r\n\t * if no literal names are assigned.\r\n\t * @param symbolicNames The symbolic names assigned to tokens, or\r\n\t * an empty array if no symbolic names are assigned.\r\n\t * @param displayNames The display names assigned to tokens, or an empty array\r\n\t * to use the values in `literalNames` and `symbolicNames` as\r\n\t * the source of display names, as described in\r\n\t * {@link #getDisplayName(int)}.\r\n\t *\r\n\t * @see #getLiteralName(int)\r\n\t * @see #getSymbolicName(int)\r\n\t * @see #getDisplayName(int)\r\n\t */\r\n\tconstructor(literalNames: Array<string | undefined>, symbolicNames: Array<string | undefined>, displayNames: Array<string | undefined>) {\r\n\t\tthis.literalNames = literalNames;\r\n\t\tthis.symbolicNames = symbolicNames;\r\n\t\tthis.displayNames = displayNames;\r\n\t\t// See note here on -1 part: https://github.com/antlr/antlr4/pull/1146\r\n\t\tthis._maxTokenType =\r\n\t\t\tMath.max(this.displayNames.length,\r\n\t\t\t\tMath.max(this.literalNames.length, this.symbolicNames.length)) - 1;\r\n\t}\r\n\r\n\t@Override\r\n\tget maxTokenType(): number {\r\n\t\treturn this._maxTokenType;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic getLiteralName(tokenType: number): string | undefined {\r\n\t\tif (tokenType >= 0 && tokenType < this.literalNames.length) {\r\n\t\t\treturn this.literalNames[tokenType];\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic getSymbolicName(tokenType: number): string | undefined {\r\n\t\tif (tokenType >= 0 && tokenType < this.symbolicNames.length) {\r\n\t\t\treturn this.symbolicNames[tokenType];\r\n\t\t}\r\n\r\n\t\tif (tokenType === Token.EOF) {\r\n\t\t\treturn \"EOF\";\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t@Override\r\n\t@NotNull\r\n\tpublic getDisplayName(tokenType: number): string {\r\n\t\tif (tokenType >= 0 && tokenType < this.displayNames.length) {\r\n\t\t\tlet displayName = this.displayNames[tokenType];\r\n\t\t\tif (displayName) {\r\n\t\t\t\treturn displayName;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet literalName = this.getLiteralName(tokenType);\r\n\t\tif (literalName) {\r\n\t\t\treturn literalName;\r\n\t\t}\r\n\r\n\t\tlet symbolicName = this.getSymbolicName(tokenType);\r\n\t\tif (symbolicName) {\r\n\t\t\treturn symbolicName;\r\n\t\t}\r\n\r\n\t\treturn String(tokenType);\r\n\t}\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAOA,QAAA,eAAA;AACA,QAAA,UAAA;AASA,QAAa,iBAAb,MAA2B;;;;;;;;;;;;;;;;;;MAqC1B,YAAY,cAAyC,eAA0C,cAAuC;AACrI,aAAK,eAAe;AACpB,aAAK,gBAAgB;AACrB,aAAK,eAAe;AAEpB,aAAK,gBACJ,KAAK,IAAI,KAAK,aAAa,QAC1B,KAAK,IAAI,KAAK,aAAa,QAAQ,KAAK,cAAc,MAAM,CAAC,IAAI;MACpE;MAGA,IAAI,eAAY;AACf,eAAO,KAAK;MACb;MAGO,eAAe,WAAiB;AACtC,YAAI,aAAa,KAAK,YAAY,KAAK,aAAa,QAAQ;AAC3D,iBAAO,KAAK,aAAa,SAAS;;AAGnC,eAAO;MACR;MAGO,gBAAgB,WAAiB;AACvC,YAAI,aAAa,KAAK,YAAY,KAAK,cAAc,QAAQ;AAC5D,iBAAO,KAAK,cAAc,SAAS;;AAGpC,YAAI,cAAc,QAAA,MAAM,KAAK;AAC5B,iBAAO;;AAGR,eAAO;MACR;MAIO,eAAe,WAAiB;AACtC,YAAI,aAAa,KAAK,YAAY,KAAK,aAAa,QAAQ;AAC3D,cAAI,cAAc,KAAK,aAAa,SAAS;AAC7C,cAAI,aAAa;AAChB,mBAAO;;;AAIT,YAAI,cAAc,KAAK,eAAe,SAAS;AAC/C,YAAI,aAAa;AAChB,iBAAO;;AAGR,YAAI,eAAe,KAAK,gBAAgB,SAAS;AACjD,YAAI,cAAc;AACjB,iBAAO;;AAGR,eAAO,OAAO,SAAS;MACxB;;AAtFuB,mBAAA,mBAAmC,IAAI,eAAe,CAAA,GAAI,CAAA,GAAI,CAAA,CAAE;AAGvF,eAAA;MADC,aAAA;;AAGD,eAAA;MADC,aAAA;;AAGD,eAAA;MADC,aAAA;;AAiCD,eAAA;MADC,aAAA;;AAMD,eAAA;MADC,aAAA;;AAUD,eAAA;MADC,aAAA;;AAeD,eAAA;MAFC,aAAA;MACA,aAAA;;AAlED,eAAA;MADC,aAAA;;AARF,YAAA,iBAAA;;;",
  "names": []
}
